---
genetic structure:
  chromosomes:
    # sequence of chromosomes.
    - type:   autosome
      # type of chromosome (string) [required]
      # one of autosome, x, y, and mitochondria are supported.
      id:     autosome 1
      # id of chromosome (string) [required]
      # arbitrary string for the name of a chromosome
      number of loci: 2
      # total number of loci (integer) [required]
      # includes both neutral and non-neutral loci.
      non-neutral loci:
      # holds information about non-neutral loci in locus-by-locus fashion.
      # it's very verbose. yes i know.
        - position: 0
          # position of non-neutral locus zero-based.
          number of alleles: 2
          # number of alleles.  This entry takes integer as low as 2 and as high as 255.
          # The lower bound is given by the fact that at least two alleles are needed in order
          # for a locus to be non-neutral.
          # The upper bound comes from the limitation of 'lineage' version of simuPOP, which
          # stores allelic information encoded in 8 bits unsign integer type.
          initial frequency: [0.2, 0.8]
          # initial frequencies of alleles given as a list, whose elements sum to unity.
          # Length of this list must be the number of alleles.
          #
          # This can take one of several forms depending on whether frequencies are
          # sex- or deme-specific.
          #
          # The first form is for cases without any specificity.  Frequencies are simpliy given
          # as a list.
          # e.g. [0.2, 0.8]
          #
          # The second form is for deme-specific cases.  Frequencies are given as a nested list.
          # Inner list represents frequencies in a single deme.
          # e.g. [[0.1, 0.9], [0.3, 0.7]]
          #
          # The third form is for sex-specific cases.  Frequencies are given as a dict with two
          # keys 'male' and 'female'.  Values of each key are list of sex-specific frequencies.
          # e.g. {male: [0.1, 0.9]
          #       female: [0.3, 0.7]}
          #
          # The last form is for both sex- and deme-specific case.  As this is a superset of
          # second and third forms.  Its format is also a super set of those forms.
          # Frequencies are given as a list of dicts.  Each dict corresponds to deme-specific
          # initial frequencies, which are sex specific.
          # e.g. [{male: [0.1, 0.9], female: [0.3, 0.7]},
          #       {male: [0.9, 0.1], female: [0.7, 0.3]}
          #  for two-deme system.
          selection coefficient: {(0,0): 0.1, (0,1): 0.2, (1,1): 0.3}
          # The basic idea is to assign selection coefficient to each genotype represtented as
          # a tuple, and the tuples are keys in a dict of coefficients.  Note that (0,1) is
          # considered to be identical genotype as (1,0) so that only one of them needs to be
          # specified.  Because of this lack of specificity in simuPOP design, it is currently
          # not possible to assign selection coefficients based on maternality or paternality.
          #
          # Another thing to note is that selection coefficient and initial frequency have to
          # have the same form.  For example, if initial frequency is given for a case without
          # sex- and deme-specificity, then selection coefficients has to be given for the
          # exact same case.
          #
          # Similar to initial frequencies, this entry could take four forms depending on
          # specificity in sex or deme.
          #
          # The first form is for cases specific neither in sex nor deme.  Then, a single dict
          # is used.
          #
          # The second form is a list of dict for deme-specific cases. Each dict is
          # deme-speccific selection coefficients.
          #
          # The third form is a dict of dicts for sex-specific cases.  The outer dict has
          # two kyes, 'male' and 'female', and each key holds a dict of sex-specific selection
          # coefficients.
          #
          # The last form is a list of dicts of dicts for sex- and deme-specific cases.
          # e.g. [{male: {(0,0): 0.1, (0,1): 0.2, (1,1): 0.3},
          #        female: {(0,0): 0.3, (0,1): 0.2, (1,1): 0.1}},
          #       {male: {(0,0): 0.4, (0,1): 0.5, (1,1): 0.6},
          #        female: {(0,0): 0.6, (0,1): 0.5, (1,1): 0.4}}]

      recombination rate: 0.5
      # recombination rates (real or sequence) [optional]
      # if omitted, all loci are free to recombine (1/2).
      # if a scalar value is given, all loci recombine at the rate.
      # if sequence, whose length is one less than the number of loci, is given,
      # i-th element in the sequence specifies the recombination rate
      # between i-th and (i+1)-th loci.
      #
      # instead, 'recombination after loci' can be specified,
      # but both cannot be specified at the same time.
      recombination after loci:
        loci: {0, 2, 4}
        # index of loci after which recombination can occur
        # (seqeuence) [required]
        # NOT IMPLEMENTED
        rate: {}
        # rate of recombinations (sequence) [requried]
        # recombination rate after the loci specified in 'loci'.
        # NOT IMPLEMENTED
    - type: x
      id: X
      number of loci: 1
population structure:
  # population structure
  population size: 500
  # local population size (integer or sequence) [required]
  # if a scalar value is given, all subpopulations used the value.
  # if sequence is given, population size of i-th subpopulation is
  # i-th element of this seqeunce.
  # the length of sequnce has to be identical to number of demes,
  mating scheme:
    mating type: random mating
    number of offspring per mating: 1
    offspring sex:
      proportion of male: 0.5
      # mode determine how to assign sexes to offspring.  If the value is 'exact'
      # exactly 'proportion of male' of offspring is male.  If the value is
      # 'by probability' each offspring has `'proportion of male` change of
      # being male.
      mode: exact
number of replicates: 1
  # number of runs (integer) [optional]
  # if omitted, single simulation is performed.
...
